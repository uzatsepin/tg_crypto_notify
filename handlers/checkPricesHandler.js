import { Composer, InlineKeyboard } from "grammy"
import { getCoinData } from "../axios/getCoinData.js"
import { getColumnName } from "../helpers/index.js"
import { mainKeyboard } from "../keyboards/index.js"
import { supabase } from "../supabase/index.js"
import { addCoinHandler } from "./addCoinHandler.js"

export const checkPricesHandler = new Composer();

checkPricesHandler.callbackQuery('cur_price', async (ctx) => {
	const {data:usersCoins} = await supabase.from("user_coins").select(`*, coin_id (*)`).eq("tg_id", ctx.from.id);

	if (!usersCoins || usersCoins.length === 0) {
		await ctx.editMessageText("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã.", {
			reply_markup: mainKeyboard,
			parse_mode: "HTML"
		});
		return;
	}


	const coinsKeyboard =  usersCoins.map((coin) => {
		return [coin.coin_id.coin_name, `price_${coin.coin_id.coin_value}`]
	});

	const buttonRow = coinsKeyboard.map(([label,data]) => InlineKeyboard.text(label, data))

	const keyboard = InlineKeyboard.from([buttonRow])

	await ctx.editMessageText('–ü–æ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É? üëá', {
		reply_markup: keyboard,
	})
});

addCoinHandler.callbackQuery(/price_/, async (ctx) => {

	const data = ctx.callbackQuery.data;
	const coinValue = data.replace("price_", "");

	const {data: userCurrencyDb} = await supabase.from("tg_users").select("currency").eq("tg_id", ctx.from.id);

	const userCurrency = userCurrencyDb[0].currency;

	const priceField = getColumnName(userCurrency);

	await ctx.editMessageText('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ...');

	try {
		const coinData = await getCoinData(coinValue, userCurrency);
		await supabase.from("coins").update({
			icon: coinData.icon,
			rank: coinData.rank,
			[priceField]: coinData.price,
			priceChange1h: coinData.priceChange1h,
			priceChange1d: coinData.priceChange1d,
			priceChange1w: coinData.priceChange1w,
		}).eq("coin_value", coinData.id)

		await ctx.editMessageText(`–î–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–µ <b>${coinData.name}</b>: \n\nüåè –ú–∏—Ä–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ ‚Äì <b>${coinData.rank}</b>\n\nü§ë –¶–µ–Ω–∞ –≤ ${userCurrency} ‚Äì <b>${coinData.price.toFixed(4)}</b>\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ <i>—á–∞—Å</i> ‚Äì <b>${coinData.priceChange1h}%</b>\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ <i>–¥–µ–Ω—å</i> ‚Äì <b>${coinData.priceChange1d}</b>\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ <i>–Ω–µ–¥–µ–ª—é</i>‚Äì <b>${coinData.priceChange1w}</b>`, {
			reply_markup: mainKeyboard,
			parse_mode: 'HTML'
		})
	} catch (error) {
		console.log(error);
		await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–µ.', {
			reply_markup: mainKeyboard
		});
	}

});