import {Composer, InlineKeyboard} from "grammy";
import {addCoinHandler} from "./addCoinHandler.js";
import {supabase} from "../supabase/index.js";
import {mainKeyboard} from "../keyboards/index.js";

export const currencyHandler = new Composer();

currencyHandler.callbackQuery('currency', async (ctx) => {
	const currency = [
		['USD', 'currency_USD', 'üí≤'],
		['EUR', 'currency_EUR', 'üí∂'],
		['UAH', 'currency_UAH', '‚Ç¥'],
	]

	try {
		const { data: userCurrencyData } = await supabase.from("tg_users").select("currency").eq("tg_id", ctx.from.id);
		const userCurrency = userCurrencyData[0].currency;

		const coinsKeyboard = currency.map(([label, data, emoji]) => {
			const labelWithEmoji = userCurrency === label ? `üü¢ ${label}` : label;
			return { text: labelWithEmoji, callback_data: data };
		});

		const keyboard = new InlineKeyboard();

		for (let i = 0; i < coinsKeyboard.length; i += 2) {
			if (i + 1 < coinsKeyboard.length) {
				keyboard.text(coinsKeyboard[i].text, coinsKeyboard[i].callback_data)
					.text(coinsKeyboard[i + 1].text, coinsKeyboard[i + 1].callback_data);
			} else {
				keyboard.text(coinsKeyboard[i].text, coinsKeyboard[i].callback_data);
			}
			keyboard.row();
		}

		await ctx.reply(`–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –≤–∞–ª—é—Ç–∞ ‚Äì <b>üü¢ ${userCurrency}</b>, –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. \n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É: üëá`, {
			reply_markup: keyboard,
			parse_mode: 'HTML'
		});
	} catch (e) {
		console.log(e);
	}
});

addCoinHandler.callbackQuery(/currency_/, async (ctx) => {
	const data = ctx.callbackQuery.data;
	const currencyValue = data.replace("currency_", "");

	try {
		await supabase.from("tg_users").update({currency: currencyValue}).eq("tg_id", ctx.from.id);

		await ctx.reply(`–í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>${currencyValue}</b>`, {
			reply_markup: mainKeyboard,
			parse_mode: 'HTML'
		})
	} catch (e) {
		console.log(e);
	}
});
