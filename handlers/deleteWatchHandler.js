import { supabase } from "../supabase/index.js";
import { Composer, InlineKeyboard } from "grammy";
import { mainKeyboard } from "../keyboards/index.js";

export const deleteWatchHandler = new Composer();

deleteWatchHandler.callbackQuery('remove_watch', async (ctx) => {
	const {data: usersCoins} = await supabase.from("user_coins").select(`*, coin_id (*)`).eq("tg_id", ctx.from.id);

	if (!usersCoins || usersCoins.length === 0) {
		await ctx.editMessageText("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã.", {
			reply_markup: mainKeyboard,
			parse_mode: "HTML"
		});
		return;
	}

	const coinsKeyboard = usersCoins.map((coin) => {
		return [coin.coin_id.coin_name, `remove_${coin.coin_id.coin_value}`];
	});


	const buttonRow = coinsKeyboard.map(([label, data]) => InlineKeyboard.text(label, data));

	const rows = [];
	for (let i = 0; i < buttonRow.length; i += 2) {
		if (i + 1 < buttonRow.length) {
			rows.push([buttonRow[i], buttonRow[i + 1]]);
		} else {
			rows.push([buttonRow[i]]);
		}
	}
	rows.push([InlineKeyboard.text('üè† –î–æ–º–æ–π', 'home')]);

	const keyboard = InlineKeyboard.from(rows);

	await ctx.editMessageText('–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è? üëá', {
		reply_markup: keyboard,
	})
});

deleteWatchHandler.callbackQuery(/remove_/, async (ctx) => {
	console.log('we are here')
	const data = ctx.callbackQuery.data;
	const coinValue = data.replace("remove_", "");

	// –ü–æ–ª—É—á–∞–µ–º coin_id –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤–∞–ª—é—Ç—ã
	const {data: coinData, error: coinError} = await supabase
		.from("coins")
		.select("coin_id")
		.eq("coin_value", coinValue)

	if (coinError || !coinData) {
		await ctx.editMessageText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–µ.", {
			reply_markup: mainKeyboard
		});
		return;
	}

	const coinId = coinData[0].coin_id;


	// –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
	const {error: deleteError} = await supabase
		.from("user_coins")
		.delete()
		.eq("tg_id", ctx.from.id)
		.eq("coin_id", coinId);

	if (deleteError) {
		await ctx.editMessageText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.", {
			reply_markup: mainKeyboard
		});
	} else {
		await ctx.editMessageText(`–í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É`, {
			reply_markup: mainKeyboard
		});
	}
});
